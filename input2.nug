myimage ntfs
myfiles file[]
myhashes sha1[]

myimage = "file.dd" | extract as ntfs
myimage


myfilesA = "file.dd" | extract as ntfs
myfilesA

//myfilesB = "file.dd" | extract  as ntfs     //BAD INPUT -- giving a .dd as a pcap should result in runtime error when it gets executed upon
//myfilesB

//myhashesdir = myfilesA | sha1
// myhashesdir

//myhashespipe = "file.dd" | extract  as ntfs | sha1

//myhashesdir
//myhashespipe
//asdf
//myfilesA
//myfilesB

//myhashesfila = "file.dd" | extract  as ntfs | filter filename == "*.pdf",ctime>"01/01/01" | sha1
//myhashesfilb = "file.dd" | extract  as ntfs | filter ctime > "01/01/01" | sha1
//myhashesfila
//myhashesfilb



//reset
//mypcap pcap
//mypackets packet[]

mypcap = "G:\school\sample.pcap" | extract as pcap
mypcap
myhttp = mypcap | filter packetfilter == "tcp and port 80 and http"
myhttp

//type(myhttp)
//type(mypcap)
//type(myfilesA)
//type(myimage)

//myEvent tuple[datetime,file,sha1]

//should properties be assignable?
//myEvent.datetime = "02/01/2015"
//myEvent.file = myFiles[2]
//myEvent.sha1 = 51..21

//todo:
// implement some kind of API-styled function loader - goal: easy addition of new functions into the language



//mymemory = "win7dump" as memory using rekall
//memext = mymemory | extract | grep passwords

