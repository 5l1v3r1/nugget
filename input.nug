//type(myhttp)
//type(mypcap)
//type(myfilesA)
//type(myimage)

//myEvent tuple[datetime,file,sha1]

//should properties be assignable?
//myEvent.datetime = "02/01/2015"
//myEvent.file = myFiles[2]
//myEvent.sha1 = 51..21

//mymemory = "win7dump" as memory using rekall
//memext = mymemory | extract | grep passwords


//myimage ntfs
//myfiles file[]
//myhashes sha1[]

//myimage = "file.dd" | extract as ntfs
//myimage


//myfilesA = "file.dd" | extract as ntfs
//myfilesA

//myfilesB = "file.dd" | extract  as ntfs     //BAD INPUT -- giving a .dd as a pcap should result in runtime error when it gets executed upon
//myfilesB

//myhashesdir = myfilesA | sha1
// myhashesdir

//myhashespipe = "file.dd" | extract  as ntfs | sha1

//myhashesdir
//myhashespipe
//asdf
//myfilesA
//myfilesB

//myhashesfila = "file.dd" | extract  as ntfs | filter filename == "*.pdf",ctime>"01/01/01" | sha1
//myhashesfilb = "file.dd" | extract  as ntfs | filter ctime > "01/01/01" | sha1
//myhashesfila
//myhashesfilb

//myhashesfilb = "file.dd" | extract  as ntfs | filter ctime > "01/01/09" | sha1
//myhashesfila
//myhashesfilb

//reset
//mypcap pcap
//mypackets packet[]

//mypcap = "G:\school\sample.pcap" | extract as pcap
//mypcap
//myhttp = mypcap | filter packetfilter == "tcp and port 80 and http"
//myhttp

//otherpcap = "G:\school\sample.pcap" | extract as pcap
//getandpost = otherpcap | filter packetfilter == "tcp[((tcp[12:1] & 0xf0) >> 2):4] = 0x504F5354 or tcp[((tcp[12:1] & 0xf0) >> 2):4] = 0x47455420"
//getandpost
//type(getandpost)
//typex(getandpost)
//printx(getandpost)

//type(myhashesfilb)
//typex(myhashesfilb)

//matches = "knownHashes.txt" | extract as plaintext-hashes | union fileAHashes

//mymemory = "win7dump" as memory using rekall
//memext = mymemory | extract | grep passwords


//myhashesfilc = "file.dd" | extract  as ntfs | filter ctime > "01/01/09"
//myhashesfilc

//myhashesfild = "file.dd" | extract  as ntfs | filter ctime > "01/01/09" | sort by ctime
//myhashesfild

// mydiskinfo = "file.dd" | extract as ntfs | diskinfo
// mydiskinfo

//myfilehashes = "file.dd" | extract  as ntfs | md5
//myfilehashes
//printx(myfilehashes)
//typex(myfilehashes)


//knownhashes = "file.dd" | extract as listof-md5
//knownhashes = "file.dd" | extract as listof-md5
//knownhashes = "file.dd" | extract as listof-sha256

//print(knownhashes)
//type(knownhashes)
//printx(knownhashes)
//typex(knownhashes)

//matches = myfilehashes | union knownhashes
//printx(matches)


//any way to loop through multiple?
// howbout do memdmp1 | pslist and union w/ memdmp2

//MyNTFSImage = "file:ntfs-partition.raw" | extract as ntfs
//MyFiles = MyNTFSImage | filter ctime > "01/01/2017"
//MyHashes = MyFiles | md5
//printx(MyHashes)

//MyNetTraffic = "G:\school\m57\data\net-2009-11-19-09_54.pcap" | extract as pcap
//MyEmailTraffic = MyNetTraffic | filter packetfilter == "tcp and dst port 25 and smtp"
//MyEmailTraffic

//MyNetTrafficZ = "G:\school\m57\data\net-2009-11-19-09_54.pcap" | extract as pcap
//MyHTTPTraffic = MyNetTrafficZ | filter packetfilter == "tcp and dst port 80 and http"
//MyHTTPTraffic

//GetRequests = MyHTTPTraffic | grep "^GET.*"
//printx(GetRequests)


//KnownKittyHashes = "knownHashes.txt" | extract as listof-md5
//Matched = MyHashes | union KnownKittyHashes
//Matched
//printx(Matched)

//MyNewNTFS = "file: raw" | extract as ntfs
//MyEmailFiles = MyNewNTFS | filter filename==".*.dbx"
//MyEmailFiles
//print(MyEmailFiles)
//printx(MyEmailFiles)
//raw(MyEmailFiles)


//compare two pslists
//mymemdump = "thememory.mddramimage" | extract as memory
//mypslist = mymemdump | pslist
//printx(mypslist)

//othermemdump = "thememory2.mddramimage" | extract as memory
//otherpslist = othermemdump | pslist
//printx(otherpslist)

//x = select pdfs
//y = x add md5, sha1

//MyNTFSImage = "file:  .raw" | extract as ntfs[63,512]
//MyFiles = MyNTFSImage | filter filename==".*.JPG"
//MyHashes = MyFiles | md5
//MyHashes
//type(MyHashes)
//typex(MyHashes)
//printx MyHashes.digest


mymemdump = "thememory.mddramimage" | extract as memory
mypslist = mymemdump | pslist
typex mypslist
printx mypslist
printx mypslist.Processes

networktraffic = "samplepcap.pcap" | extract as pcap
rawhttp = networktraffic | filter packetfilter == "tcp and dst port 80 and http"

//printx rawhttp
httpa = rawhttp | extract as http
print httpa.Host